name: Build and Test
on: [push]

jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-22.04

    # Define a cache key for pip dependencies.
    # This cache will be identified using the hash of your python_requirements.txt.
    # If the requirements file hasn't changed since the last run, the cache will be reused.
    env:
      PIP_CACHE_DIR: ~\pip_cache

    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."

      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}

      # Cache LLVM and Clang installation
      - name: Cache LLVM
        uses: actions/cache@v3
        with:
          path: path_to_llvm_installation_directory
          key: llvm-16.0
          restore-keys: |
            llvm-16.0

      - name: Install LLVM and Clang if not cached
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "16.0"
          targets: "X86"

      - name: Check LLVM opt and g++ version
        run: |
          opt --version
          g++ -v  

      # Cache Python dependencies
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: pip-${{ hashFiles('**/python_requirements.txt') }}
          restore-keys: |
            pip-

      - name: Setup Python version
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Create and start virtual environment
        run: |
          python3 -m venv venv
          source venv/bin/activate

      # Only install if cache was not hit
      - name: Install dependencies
        if: steps.cache-pip.outputs.cache-hit != 'true'
        run: | 
          echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu focal main universe" | sudo tee -a /etc/apt/sources.list
          sudo apt update
          sudo apt -y install g++-7 
          pip install -r python_requirements.txt
          sudo apt-get install gcc-multilib g++-multilib
          sudo apt install build-essential 

      - name: Build all
        run: |
          bash build_all.sh
          # /usr/bin/c++ --version
      # - name: Test
      #   run: cd /home/runner/work/morpher-v2/morpher-v2/dfg_generator/build/src && /usr/bin/c++ -DdfggenPass_EXPORTS -I/home/runner/work/morpher-v2/morpher-v2/llvm/include -I/home/runner/work/morpher-v2/morpher-v2/dfg_generator/include -std=gnu++17 -fPIC -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-rtti -ggdb -MD -MT src/CMakeFiles/dfggenPass.dir/common/dfg.cpp.o -MF CMakeFiles/dfggenPass.dir/common/dfg.cpp.o.d -o CMakeFiles/dfggenPass.dir/common/dfg.cpp.o -c /home/runner/work/morpher-v2/morpher-v2/dfg_generator/src/common/dfg.cpp

      - name: Run array add
        run:  python -u run_morpher_llvm16.py morpher_benchmarks/array_add/array_add.c array_add

      - run: echo "üçè This job's status is ${{ job.status }}."

